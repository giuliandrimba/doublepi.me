{
  "name": "ways",
  "version": "0.3.4",
  "author": {
    "name": "Anderson Arboleya",
    "email": "anderson@arboleya.me"
  },
  "description": "Micro router with flow-based navigation mechanism and addapters support",
  "keywords": [
    "router",
    "navigation",
    "flow"
  ],
  "main": "./lib/ways",
  "scripts": {
    "test": "make test"
  },
  "directories": {
    "lib": "./lib"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/serpentem/ways"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "dependencies": {
    "happens": "0.4.x"
  },
  "devDependencies": {
    "chai": "1.8.x",
    "mocha": "1.14.x",
    "mversion": "0.2.x",
    "istanbul": "0.1.x",
    "coveralls": "2.3.x"
  },
  "readme": "# Ways\n\nMicro router with [flow-based](#flow-mode) navigation mechanism and adapters support.\n\n[![Build Status](https://travis-ci.org/serpentem/ways.png?branch=master)](https://travis-ci.org/serpentem/ways)\n[![Coverage Status](https://coveralls.io/repos/serpentem/ways/badge.png)](https://coveralls.io/r/serpentem/ways)\n[![Dependency Status](https://gemnasium.com/serpentem/ways.png)](https://gemnasium.com/serpentem/ways)\n[![NPM version](https://badge.fury.io/js/ways.png)](http://badge.fury.io/js/ways)\n\n## Installation\n\n````\nnpm install ways --save-dev\n````\n\n## Adapters\n\nThis router alone doesn't implement HTML5 History or Hash support, for browsers.\n\nInstead you may use adapters to expand it.\n\n * http://github.com/serpentem/ways-browser\n\n````javascript\nvar ways = require('ways');\nvar browser = require('ways-browser');\n\nways.use(browser);\nways('/my/route', function(req){ /* ... */ });\nways.init();\n````\n\n## Basics\nBasic signature is `ways(pattern, handler)`.\n\n````javascript\nvar ways = require('ways');\n\n// simple route\nways('/pages', function(req){\n  // req.pattern, req.url, req.params\n});\n\n// named params\nways('/pages/:id', handler);\n\n// splat params\nways('/pages/:id/tags/*tags', handler);\n\n// optional params\nways('/pages/:id?', handler);\nways('/pages/:id?/tags/*tags?', handler);\n\n// match-all\nways('*', handler);\n\n// initialize\nways.init();\n````\n\n### Go\n\nRedirects app.\n```javascript\n// ways.go(url, [title, [state]]);\nways.go('/pages');\nways.go('/pages', 'Page Title');\nways.go('/pages', 'Page Title', {foo: 'bar'});\n````\n\n### Go Silent\nSame as `ways.go`, but in silent mode, without triggering any route.\n\n```javascript\n// ways.go.silent(url, [title, [state]]);\nways.go.silent('/pages');\nways.go.silent('/pages', 'Page Title');\nways.go.silent('/pages', 'Page Title', {foo: 'bar'});\n````\n> Think about `go() = pushState`, `go.silent() = replaceState`\n\n### Pathname\n\nGets current pathname.\n\n```javascript\n// window.pathname()\nways.go(ways.pathname());\n````\n \n## Flow mode\n\nConnect your routes altogheter, creating a dependency graph between them.\n\nLets say you have three routes:\n\n````javascript\nways('/page/', function (req) { /* ... */ });\nways('/page/sidebar', function (req) { /* ... */ });\nways('/page/', function (req) { /* ... */ });\n````\n\nNow lets assume that `/c` depends on `/b` that depends on `/a`.\n\nSo when we call `/c`, we really want to execute:\n  1. First `/a`\n  1. Then `/b`\n  1. And finally `/c`\n\nThat's what flow based mode do.\n\n### Activation\n\nThe passed mode tell the order things should run.\n\n```javascript\n// ways.mode(mode);\nways.mode('destroy+run'); // destroy first, run after\nways.mode('run+destroy'); // run before, destroy after\n````\n\n### Signature changes\n\nIn `flow`, the routes can be run or destroyed and signature changes a little.\n  \nYou must pass two handlers instead of one, a `runner` and a `destroyer`.\n\nYou may also pass a `dependency`.\n\n\n````javascript\n// ways(pattern, run, destroy, [dependency])\n\nvar ways = require('ways');\nvar pages = require('./pages');\n\nways('/', pages.base, pages.destroy);\n\n// 'pages/:id' depends on '/'\nways('/pages/:id', pages.show, pages.destroy, '/');\n\n// '/pages/:id/edit' depends on '/pages/:id'\nways('/pages/:id/edit', pages.edit, pages.destroy, '/pages/:id');\n````\n\nBoth handlers (`run` and `destroy`) will receive two params when called:\n\n- `req` - infos about the request\n- `done`- callback to be called when route finishes running or destroying\n\n### Example\n\nLets take a look at a full example:\n\n````javascript\nvar ways = require('ways');\n\nvar running = '+ RUN url=%s, pattern=%s, params='\nvar destroying = '- DESTROY url=%s, pattern=%s, params='\n\nvar run = function(req, done) {\n  console.log(running, req.url, req.pattern, req.params);\n  done();\n};\n\nvar destroy = function(req, done) {\n  console.log(destroying, req.url, req.pattern, req.params);\n  done();\n};\n\nways('/', run, destroy);\nways('/pages', run, destroy, '/');\nways('/pages/:id', run, destroy, '/pages');\nways('/pages/:id/edit', run, destroy, '/pages/:id');\nways('*', run, destroy);\n````\n\nOk, now lets start our navigation:\n\n#### Step 1\n\n````javascript\n// pretend current url is '/pages/33/edit'\n// init method will use it\nways.init();\n````\n\nThis will produce the following output:\n\n````\n+ RUN url='/', pattern='/', params= Object {}\n+ RUN url='/pages', pattern='/pages', params= Object {}\n+ RUN url='/pages/33', pattern='/pages/:id', params= Object {id: \"33\"}\n+ RUN url='/pages/33/edit', pattern='/pages/:id/edit', params= Object {id: \"33\"} \n````\n> At the beggining there's no route to be destroyed, so the dependency chain is\n> computed and every route gets executed\n\n#### Step 2\n\n````javascript\nways.go('/pages/22/edit');\n````\n\nThis will produce the following output:\n\n````\n- DESTROY url='/pages/33/edit', pattern='/pages/:id/edit', params= Object {id: \"33\"}\n- DESTROY url='/pages/33', pattern='/pages/:id', params= Object {id: \"33\"}\n+ RUN url='/pages/22', pattern='/pages/:id', params= Object {id: \"22\"}\n+ RUN url='/pages/22/edit', pattern='/pages/:id/edit', params= Object {id: \"22\"}\n````\n\n> Here we have two routes being destroyed before running the new ones, this is\n> computed again based on the dependency chain. In this case, useless routes are\n> `destroyed` before running the new ones, this order can be changed passing the\n> mode `destroy+run`.\n\n#### Step 3\n\n````javascript\nways.go('/any/route/here');\n````\n\nThis will produce the following output:\n\n````\n- DESTROY url='/pages/22/edit', pattern='/pages/:id/edit', params= Object {id: \"22\"}\n- DESTROY url='/pages/22', pattern='/pages/:id', params= Object {id: \"22\"}\n- DESTROY url='/pages', pattern='/pages', params= Object {}\n- DESTROY url='/', pattern='/', params= Object {}\n+ RUN url='/any/thing/here', pattern='*', params= Object {} \n````\n\n> As the route in question here has no dependencies, note that every other route\n> needs to be destroyed before it runs.\n\n\n### Restricted urls\n\nA simple way to have restricted urls would be like:\n\n````javascript\nfunction auth(){\n  // your logic here\n  return true;\n}\nfunction restrict(next) {\n  return function(req, done) {\n    auth(function(authorized) {\n      if(!authorized)\n        ways.go('/login');\n      else\n        next(req, done);\n    });\n  }\n}\n\nways('/pages/secret', restrict(pages.secret), pages.destroy)\n````\n\n# License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Anderson Arboleya\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/serpentem/ways/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/serpentem/ways/issues"
  },
  "homepage": "https://github.com/serpentem/ways",
  "_id": "ways@0.3.4",
  "_shasum": "08b88dd1bec468365a3a2b10d161a91df9cd1292",
  "_resolved": "git://github.com/giuliandrimba/ways.git#a996994d6662bcb19b928ecccb0c9c81b9279406",
  "_from": "ways@^0.3.4"
}
